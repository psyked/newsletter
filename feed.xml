<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Front View</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="//psyked.github.io/newsletter/feed.xml" />
<link rel="alternate" type="text/html" href="//psyked.github.io/newsletter/" />
<updated>2014-05-25T18:47:25-04:00</updated>
<id>//psyked.github.io/newsletter/</id>
<author>
  <name>MMT Digital</name>
  <uri>//psyked.github.io/newsletter/</uri>
  <email>frontendteam@mmtdigital.co.uk</email>
</author>


<entry>
  <title type="html"><![CDATA[...on "Responsive Images"]]></title>
  <link rel="alternate" type="text/html" href="//psyked.github.io/newsletter/presentations/javascript-style-guide/"/>
  <id>//psyked.github.io/newsletter/presentations/javascript-style-guide</id>
  <published>2014-05-21T00:00:00-04:00</published>
  <updated>2014-05-21T00:00:00-04:00</updated>
  <author>
    <name>MMT Digital</name>
    <uri>//psyked.github.io/newsletter</uri>
    <email>frontendteam@mmtdigital.co.uk</email>
  </author>
  <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;What’s the correct approach to the responsive images conundrum? Is it the fabled &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element? What about &lt;code&gt;srcset&lt;/code&gt;? How about just doing it with Javascript, or does the solution lie somewhere else entirely?&lt;/p&gt;

&lt;p&gt;In this presentation we looked at all of these, their limitations and their strengths, and examined which of these can actually be used &lt;em&gt;today.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;https://docs.google.com/presentation/d/1cktnpwyXfKdPyYuvcG0LhyjqOiBl4JbCkjGlMBbonNg/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript-based solutions give us the best cross-browser support.&lt;/li&gt;
  &lt;li&gt;SVG and the ‘Clown Car’ technique gives us the most complete feature set for todays’ browsers, works in &lt;a href=&quot;http://caniuse.com/#feat=css-mediaqueries,svg&quot;&gt;practically all browsers&lt;/a&gt;, but it’s difficult to generate and manage those files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;srcset&lt;/strong&gt; is available in the &lt;a href=&quot;http://caniuse.com/srcset&quot;&gt;latest version of Chrome&lt;/a&gt;, but it doesn’t cover all of the possible ‘responsive image’ definitions.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Picture&lt;/strong&gt; element is touted as the future, but the spec is not settled and no browsers implement it yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these techniques have their benefits, and there’s decent polyfill libraries available for them, so a lot of the choices come down to evaluating the manageability of the solution and the importance of the element.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://responsiveimages.org/&quot;&gt;Responsive Images Community Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-tricks.com/which-responsive-images-solution-should-you-use/&quot;&gt;Which responsive images solution should you use?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://alistapart.com/blog/post/picture-element-qa&quot;&gt;A Q&amp;amp;A on the Picture Element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://html5doctor.com/html5-adaptive-images-end-of-round-one/&quot;&gt;HTML5 adaptive images: end of round one&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ericportis.com/posts/2014/srcset-sizes/&quot;&gt;Srcset and sizes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;//psyked.github.io/newsletter/presentations/javascript-style-guide/&quot;&gt;...on "Responsive Images"&lt;/a&gt; was originally published by MMT Digital at &lt;a href=&quot;//psyked.github.io/newsletter&quot;&gt;Front View&lt;/a&gt; on May 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[...on "Responsive Images"]]></title>
  <link rel="alternate" type="text/html" href="//psyked.github.io/newsletter/presentations/responsiveimages/"/>
  <id>//psyked.github.io/newsletter/presentations/responsiveimages</id>
  <published>2014-03-27T00:00:00-04:00</published>
  <updated>2014-03-27T00:00:00-04:00</updated>
  <author>
    <name>MMT Digital</name>
    <uri>//psyked.github.io/newsletter</uri>
    <email>frontendteam@mmtdigital.co.uk</email>
  </author>
  <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;What’s the correct approach to the responsive images conundrum? Is it the fabled &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element? What about &lt;code&gt;srcset&lt;/code&gt;? How about just doing it with Javascript, or does the solution lie somewhere else entirely?&lt;/p&gt;

&lt;p&gt;In this presentation we looked at all of these, their limitations and their strengths, and examined which of these can actually be used &lt;em&gt;today.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;https://docs.google.com/presentation/d/1cktnpwyXfKdPyYuvcG0LhyjqOiBl4JbCkjGlMBbonNg/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript-based solutions give us the best cross-browser support.&lt;/li&gt;
  &lt;li&gt;SVG and the ‘Clown Car’ technique gives us the most complete feature set for todays’ browsers, works in &lt;a href=&quot;http://caniuse.com/#feat=css-mediaqueries,svg&quot;&gt;practically all browsers&lt;/a&gt;, but it’s difficult to generate and manage those files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;srcset&lt;/strong&gt; is available in the &lt;a href=&quot;http://caniuse.com/srcset&quot;&gt;latest version of Chrome&lt;/a&gt;, but it doesn’t cover all of the possible ‘responsive image’ definitions.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Picture&lt;/strong&gt; element is touted as the future, but the spec is not settled and no browsers implement it yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these techniques have their benefits, and there’s decent polyfill libraries available for them, so a lot of the choices come down to evaluating the manageability of the solution and the importance of the element.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://responsiveimages.org/&quot;&gt;Responsive Images Community Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-tricks.com/which-responsive-images-solution-should-you-use/&quot;&gt;Which responsive images solution should you use?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://alistapart.com/blog/post/picture-element-qa&quot;&gt;A Q&amp;amp;A on the Picture Element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://html5doctor.com/html5-adaptive-images-end-of-round-one/&quot;&gt;HTML5 adaptive images: end of round one&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ericportis.com/posts/2014/srcset-sizes/&quot;&gt;Srcset and sizes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;//psyked.github.io/newsletter/presentations/responsiveimages/&quot;&gt;...on "Responsive Images"&lt;/a&gt; was originally published by MMT Digital at &lt;a href=&quot;//psyked.github.io/newsletter&quot;&gt;Front View&lt;/a&gt; on March 27, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Automation For The Win]]></title>
  <link rel="alternate" type="text/html" href="//psyked.github.io/newsletter/tools/automate-all-the-things/"/>
  <id>//psyked.github.io/newsletter/tools/automate-all-the-things</id>
  <published>2014-03-05T00:00:00-05:00</published>
  <updated>2014-03-05T00:00:00-05:00</updated>
  <author>
    <name>MMT Digital</name>
    <uri>//psyked.github.io/newsletter</uri>
    <email>frontendteam@mmtdigital.co.uk</email>
  </author>
  <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Great Developers&lt;/strong&gt; are often also &lt;strong&gt;Lazy Developers&lt;/strong&gt;. It’s not a criticism, it’s a good thing. As the saying goes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lazy programmers hate doing grunt work, and will, whenever possible, find ways to automate or scriptify the work, 
instead of doing it by hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re going to have to repeat the same tasks all the time, you might as well automate them and start finding better 
uses for all of that free time you’ll be having in the near future.&lt;/p&gt;

&lt;p&gt;Automation itself is not a new concept, but it’s relatively recently - with the rise of tools like 
&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; - that it’s crossed the threshold of being accessible to, and designed for those that work 
in the realm of the “Front End”.  One of the key benefits of Grunt is that it’s a tool that’s extensible and built in a
language which we’re all familiar with - &lt;em&gt;JavaScript&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;h3 id=&quot;what-can-we-automate&quot;&gt;What can we automate?&lt;/h3&gt;

&lt;p&gt;Often the most common elements that we need to automate are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript minification&lt;/strong&gt;, combining lots of separate javascript files into one single, optimised file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CSS minification&lt;/strong&gt;, and more importantly, using preprocessors such as SASS to generate our output CSS files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spritesheet generation&lt;/strong&gt;, because that’s an absolute nightmare to create and maintain by human hands. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimisation&lt;/strong&gt;, &lt;strong&gt;generation&lt;/strong&gt; or &lt;strong&gt;processing&lt;/strong&gt; of &lt;strong&gt;images&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s much more besides - such as uploading or downloading files, compressing archives, checking code quality or 
executing command-line actions - and all of which can easily be boring, repetitive, complex and error prone all at the 
same time.&lt;/p&gt;

&lt;h3 id=&quot;an-introduction-to-grunt&quot;&gt;An introduction to Grunt&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;  is our current weapon of choice for automating our repetitive local workflow tasks. In 
December 2013 we had a “Brown Bag Session” introducing Grunt, and since then we’ve had some initiatives such as 
&lt;em&gt;Automate ALL THE THINGS&lt;/em&gt; as a knowledge sharing exercise and to push Grunt’s adoption across a range of internal 
projects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Introducing Grunt&lt;/strong&gt; - a JavaScript-syntax tool for automating your build processes. Better than batch files, better 
than rakefiles, better than ANT or anything else out there. I’m going to show you some magic, and then show you how to 
make that magic happen yourself, and then your existing processes will look bleak, dull and boring in comparison.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;d71b909045610131812366ab85d4b2f5&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;(Naturally a presentation like this loses a bit of its ‘wow’ factor when it’s not actually being presented, so feel 
free to talk to a Training Champion, James F or another member of the Front End Team for a personal recap.)&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The benefits of having these monotonous tasks scripted should be as obvious as using source control. And just like source 
control, once you’re on the bandwagon you’ll wonder why you ever tried to live without it.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Grunt for People Who Think Things Like Grunt are Weird and Hard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/articles/an-introduction-to-grunt--wp-34728&quot;&gt;An Introduction To Grunt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yeoman.io/blog/performance-optimization.html&quot;&gt;Grunt and Gulp Tasks for Performance Optimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/addyosmani/automating-front-end-workflow&quot;&gt;Presentation: Automating Front-end Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, go build something awesome:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/newsletter/images/automation-awesome.gif&quot; alt=&quot;Automation is great, isn&#39;t it?&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;//psyked.github.io/newsletter/tools/automate-all-the-things/&quot;&gt;Automation For The Win&lt;/a&gt; was originally published by MMT Digital at &lt;a href=&quot;//psyked.github.io/newsletter&quot;&gt;Front View&lt;/a&gt; on March 05, 2014.&lt;/p&gt;</content>
</entry>

</feed>
